<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>내가 맨날 까먹어서 작성하는 &#39;객체 지향 프로그래밍&#39;</title>
      <link href="2021/05/09/oop/"/>
      <url>2021/05/09/oop/</url>
      
        <content type="html"><![CDATA[<img src="\img\oop.png" alt="image-20210406150009397" style="zoom:100%;" /><h1 id="OOP란"><a href="#OOP란" class="headerlink" title="OOP란?"></a>OOP란?</h1><ul><li>객체지향 프로그래밍</li><li>객체의 관점(객체를 기준)에서 프로그래밍</li><li>각 “객체”들은 서로 메시지를 주고 받을 수 있으며 데이터 처리가 가능</li><li><strong>애플리케이션을 구성하는 요소들을 객체로 바라보고, 객체들을 유기적으로 연결하여 프로그래밍 하는 것.</strong><br></li></ul><h1 id="OOP의-장점"><a href="#OOP의-장점" class="headerlink" title="OOP의 장점"></a>OOP의 장점</h1><ul><li>프로그램이 유연하고 변경이 용이</li><li>프로그램의 개발과 보수가 간편하다</li><li>코드가 직관적이다<br> </li><li>강한 응직렵과 약한 결합력<ul><li>응집력 : 프로그램의 한 요소가 해당 기능을 수행하기 위해 얼마만큼의 연관된 책임과 아이디어가 뭉쳐있는지를 나타내는 정도.  프로그램의 한 요소가 특정 목적을 위해 밀접하게 연관된 기능들이 모여서 구현되어 있고, 지나치게 많은 일을 하지 않을때 응집력이 높다고 한다. </li><li>결합력 : 프로그램 코드의 한 요소가 다른 것과 얼마나 강력하게 연결되어 있는지, 얼마나 의존적이지를 나타내는 정도. 결합력이 낮다는 것은 한 요소가 다른 요소들과 관계를 크게 맺고 있지 않은 상태를 의미. </li></ul></li><li>하나의 문제 해결을 위해 데이터를 모아 놓은 객체를 활용한 프로그래밍을 지향 -&gt; 응집력 강화</li><li>클래스 간에 독립적으로 디자인 -&gt; 결합력 약화<br></li></ul><h1 id="OOP-구성-요소"><a href="#OOP-구성-요소" class="headerlink" title="OOP 구성 요소"></a>OOP 구성 요소</h1><ul><li>클래스(Class)<ul><li>같은 종류의 집단에 속하는 속성과 행위를 정의한 것. </li></ul></li><li>객체(Object)<ul><li>클래스의 인스턴스(Instance). 상위 클래스의 속성 + 개별적 특성과 행위 (메서드 : Method) </li><li>객체와 인스턴스의 차이?<ul><li>객체는 소프트웨어 세계에 구현할 대상</li><li>클래스는 객체를 구현하기 위한 설계도</li><li>인스턴스는 설계도에 따라 소프트 세계에 구현된 실체. 실체화된 인스턴스는 메모리에 할당된다. </li></ul></li></ul></li><li>메서드(Method)<ul><li>클래스로부터 생성된 객체를 사용하는 방법. 객체의 속성을 조작. <br></li></ul></li></ul><h1 id="OOP의-특성"><a href="#OOP의-특성" class="headerlink" title="OOP의 특성"></a>OOP의 특성</h1><ul><li><p>캡슐화(Encapsulation)</p><ul><li>하나의 객체에 대해 그 객체가 특정한 목적을 위한 필요한 변수나 메소드를 하나로 묶는 것.</li><li>객체의 데이터를 외부에서 직접 접근하지 못하게 막고, 함수를 통해서만 조작이 가능하게 하는 작업</li><li>외부에서 변수에 직접 접근하지 못하게 하다  / 메소드로만 조작 가능</li></ul></li><li><p>추상화(Abstraction)</p><ul><li>객체들이 가진 공통의 특성들을 파악하고 불필요한 특성들을 제거하는 과정</li><li>객체들이 가진 동작들을 기준으로 이용자들이 동작만 쉽게 구동할 수 있게 한다.</li><li>이용자들이 객체를 더 쉽게 사용할 수 있다. </li><li><strong>주의</strong> 속성 위주가 아닌 동작 위조 </li><li>어떠한 동작과 속성을 정의하고 불필요한 정의들을 삭제하여 이용자가 편리하게 객체를 이용할 수 있게 한다</li><li>추상클래스?</li></ul></li><li><p>다형성(Polymorphism)</p><ul><li>상속을 통해 기능을 확장하거나 변경하는 것을 가능하게 한다. </li><li>형태가 같은데 다른 기능을 하는 것(같은 동작이지만 다른 결과물이 나온다)</li><li>오버라이딩(Overriding)<ul><li>부모 클래스에서 상속받은 자식 클래스에서 부모클래스에서 만들어진 매서드를 자식클래스에서 자신의 입맛대로 다시 재정의해서 사용하는 것</li></ul></li><li>오버로딩(Overloading)<ul><li>같은 이름의 매서드를 사용하지만 매서드마다 다른 용도로 사용되며 그 결과물도 다르게 구현할 수 있게 만드는 개념</li></ul></li></ul></li><li><p>재사용성 </p><ul><li>한 번 작성된 코드를 활용하여 동일한 객체를 만들 수 있는 것.</li><li>생성자 함수(Constructor) &amp; 팩토리 함수(Factory) <ul><li>생성자 함수 : new라는 키워드와 함께 함수를 실행했을 때, 해당 함수에 정의된 내용으로 객체를 만드는 것</li><li>팩토리 함수 : 객체를 반환하는 함수</li></ul></li></ul></li><li><p>상속성</p><ul><li>상속<ul><li>기존 상위클래스에 근거하여 새롭게 클래스와 행위를 정의할 수 있게 도와주는 개념</li><li>기존 클래스에 기능을 가져와 재사용할 수 있으면서도 동시에 새롭게 만든 클래스에 새로운 기능을 추가할 수 있게 만들어준다</li></ul></li><li>상속은 코드의 중복을 없애기 위함에도 필요하다</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>기술 블로그를 해야된다며? (3) 블로그 설정 바꾸기</title>
      <link href="2021/04/08/blog03/"/>
      <url>2021/04/08/blog03/</url>
      
        <content type="html"><![CDATA[<img src="\img\HexoXGithub.png" alt="image-20210406150009397" style="zoom:100%;" /><h1 id="블로그-설정을-바꾸자"><a href="#블로그-설정을-바꾸자" class="headerlink" title="블로그 설정을 바꾸자"></a>블로그 설정을 바꾸자</h1><p>이제 남들이 우리 블로그를 볼 수 있게 되었으니 남부끄럽지 않게 블로그 이름이나 프로필을 바꾸어 줄 필요성이 있다. 이 블로그가 누구 블로그인지는 알아야 하지 않겠는가.</p><h2 id="Hexo-설정-바꾸기"><a href="#Hexo-설정-바꾸기" class="headerlink" title="Hexo 설정 바꾸기"></a>Hexo 설정 바꾸기</h2><p>기본적인 블로그 세팅은 블로그 루트 폴더의 <code>_config.yml</code> 파일을 수정하는 것으로 간단하게 가능하다. </p><p><img src="/img/image-20210411183623881.png" alt="image-20210411183623881"></p><center>_config.yml 파일 내부</center><p>여기서 값을 바꿔주는 것 만으로 간단하게 설정이 가능하다. 각각이 무엇에 대한 설정인지 알고싶다면 <a href="https://hexo.io/ko/docs/configuration">Hexo docs</a>에 가면 항목들에 대해 자세히 나와있다. </p><p><img src="/img/image-20210411195053034.png" alt="image-20210411195053034"></p><center>Site 설정</center><p>사이트의 제목이나 작성자등의 정보를 이 곳에서 변경 할 수있다</p><p><img src="/img/image-20210411184649543.png" alt="image-20210411184649543"></p><center>글 쓰기 설정</center><p>포스트를 작성할 때의 설정을 변경할 수 있다. 사실 Site 설정을 제외하면 기본 설정을 그대로 가져가도 큰 문제는 없기 때문에 Hexo docs에서 어떤것이 있는지 확인만 하는 정도로 충분하다.</p><h2 id="테마-설정을-바꾸자"><a href="#테마-설정을-바꾸자" class="headerlink" title="테마 설정을 바꾸자"></a>테마 설정을 바꾸자</h2><p>Hexo 자체의 설정도 중요하지만 테마를 적용했다면 테마에서의 설정이 매우 중요하다. 이 부분은 본인의 블로그에 적용시킨 테마에 따라 조금씩은 달라지겠지만 요령은 전부 다 비슷하다. 이 포스트에서는 이 블로그의 테마인 <a href="https://github.com/Haojen/hexo-theme-Claudia">Claudia테마</a>를 기준으로 설명하겠다. 테마 설정은 루트 폴더 내의 <code>theme/_config.yml</code>을 변경하는 것으로 바꿔줄 수 있다. </p><p><img src="/img/image-20210411185153103.png" alt="image-20210411185153103"></p><center>메뉴 설정</center><p>블로그 오른쪽 위 메뉴에 대한 설정이다. </p><p><img src="/img/image-20210411185243789.png" alt="image-20210411185243789"></p><center>이것들이다</center><p>예를 들어, <code>About</code> 을 누르게 되면 <code>USERNAME.github.io/about</code>으로 이동하게 된다. </p><p><img src="/img/image-20210411185419679.png" alt="image-20210411185419679"></p><center>위젯 설정</center><p>블로그 오른쪽의 프로필, Recent, Archives 등 메뉴에 대한 설정이다. 항목을 넣고 뺄 수 있게 되어있다. </p><p><img src="/img/image-20210411185528464.png" alt="image-20210411185528464"></p><center>위젯들</center><p><img src="/img/image-20210411185647416.png" alt="image-20210411185647416"></p><center>소셜 설정</center><p>프로필 밑에 있는 GitHub나 SNS 링크를 설정할 수 있다. 디폴트로는 테마 제작자인 haojen의 GitHub가 링크되어 있지만 본인의 GitHub 사용자 이름으로 바꿔주면 GitHub 버튼을 눌렀을 때 본인의 GitHub로 이동 할 수 있게 할 수도 있다. </p><p><img src="/img/image-20210411185839083.png" alt="image-20210411185839083"></p><center>소셜 버튼들</center><p>만일, 본인이 쓰지않는 SNS 링크가 있거나, GitHub 링크를 표시하기 싫다면 입력값에 아무것도 입력하지 않는다면 표시되지 않게 된다. </p><p><img src="/img/image-20210411190022814.png" alt="image-20210411190022814"></p><center>유저 프로필 설정</center><p>프로필 설정이다.<br> <strong>name</strong>은 당연히도 유저의 이름,<br><strong>avatar</strong>는 프로필 사진 설정. source 폴더 내에 images 폴더를 만들고 그 곳에 사진 파일을 넣어두면 설정 가능하다,<br><strong>location</strong>은 본인 위치,<br><strong>description</strong>은 소개 문구,<br><strong>footnotes</strong>는 블로그 맨 하단에 표시되는 문구 등이다. </p><p><img src="/img/image-20210411190405935.png" alt="image-20210411190405935"></p><center>footnotes를 추가했을 경우</center><p><img src="/img/image-20210411190746279.png" alt="image-20210411190746279"></p><center>댓글 서비스 설정</center><p>정적 웹사이트로 만든 블로그이기 때문에 댓글 기능은 외부의 소셜 댓글 서비스를 통해서 사용한다.  </p><p><strong>comment_utteranc</strong>를 true로 설정하면 아래와 같은 댓글 위젯을 사용할 수 있게된다. 물론 repo에는 GitHub 페이지 설정이 되어있는 본인 저장소의 링크를 입력해 주어야 한다. </p><p><img src="/img/image-20210411191129511.png" alt="image-20210411191129511"></p><center>Utteranc 댓글 위젯</center><p><strong>comment_valine</strong>을 true로 설정하면 이런 댓글 위젯이 생긴다. 중국의 서비스인것 같아 필자는 false로 설정을 해두었다.</p><p><img src="/img/image-20210411191225582.png" alt="image-20210411191225582"></p><center>Valine 댓글 위젯</center><p><strong>comment_disqus</strong>을 true로 설정하면 이런 댓글 위젯이 생긴다. 로그인 수단이 다양하기 때문에 많이 쓰이고 있는 서비스이다. 하지만 필자의 경우엔 디자인이 마음에 들지않아서 false로 설정해두었다.  </p><p><img src="/img/image-20210411191412442.png" alt="image-20210411191412442"></p><center>Disqus 댓글 위젯</center><p><img src="/img/image-20210411191653714.png" alt="image-20210411191653714"></p><center>블로그 테마 설정</center><p>블로그 테마를 light / dark 중에서 선택할 수 있다. auto를 선택하는 경우에는 dark테마가 적용되는 듯 하다. </p><p><img src="/img/image-20210411191800753.png" alt="image-20210411191800753"></p><center>favicon 설정</center><p>favicon은 웹사이트에 접속했을 때 상단 탭에 보여지는 이미지로 즐겨찾기에 등록할 때도 함께 등록된다. </p><p><img src="/img/image-20210411192007775.png" alt="image-20210411192007775"></p><center>상단 탭에 보여지는 favicon(좌), 북마크에 보여지는 favicon(우)</center><p>프로필 사진과 마찬가지로 이미지 파일의 경로를 입력하여 설정이 가능하다. </p><p><img src="/img/image-20210411193724912.png" alt="image-20210411193724912"></p><center>SEO 설정</center><p>SEO(search engine optimization) 관련 설정으로 검색 엔친 최적화를 위한 설정이다. 이것에 대해선 다음 포스트에서 설명하겠다.</p><p><img src="/img/image-20210411194002978.png" alt="image-20210411194002978"></p><center>About 페이지 설정</center><p>About 페이지의 이미지를 설정하는 항목이다. About 페이지는 오른쪽 위 메뉴로 들어갈 수 있는데 왼쪽에 이미지가, 오른쪽에 설명하는 글이 들어가게 된다. About 페이지는 </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new page about<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>  <p>커맨드를 입력하면 source 폴더 내에 about 폴더가 생기게 되는데 그 안의 <code>index.md</code> 파일을 열어서 <code>layout: about</code> 을 추가해주면 about 페이지에 접속할 수 있게 된다. </p><p><img src="/img/image-20210411195118164.png" alt="image-20210411195118164"></p><center>About 페이지</center><h1 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h1><p> 블로그 설정 하는 법을 알아보았다. 자세한 것은 제작자의 GitHub(본 블로그의 테마는 <a href="https://github.com/Haojen/hexo-theme-Claudia">여기</a>)에서 확인할 수 있으니 각자 테마의 저장소를 한번쯤 확인해 보는 것도 좋다. 다음 포스팅에서는 포스팅 방법에 대해서 알아보겠다.</p>]]></content>
      
      
      
        <tags>
            
            <tag> GitHub Page </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>기술 블로그를 해야된다며? (2) GitHub를 이용해 호스팅</title>
      <link href="2021/04/07/blog02/"/>
      <url>2021/04/07/blog02/</url>
      
        <content type="html"><![CDATA[<img src="\img\HexoXGithub.png" alt="image-20210406150009397" style="zoom:100%;" /><h1 id="일단-깃허브-페이지란걸-만들자"><a href="#일단-깃허브-페이지란걸-만들자" class="headerlink" title="일단 깃허브 페이지란걸 만들자"></a>일단 깃허브 페이지란걸 만들자</h1><p>웹사이트를 인터넷 세상에 배포하려며는 서버라는 것이 필요하지만 이것들은 응당 돈이 든다. 남의 전기 쓰는데 세상에 공짜가 어디있겠는가. </p><p>하지만 우리가 필요한 건 그저 테스트 파일 몇개만 올려놓을 수 있는 조그마한 공간뿐이고 고작 그걸 위해 돈을 쓸 정도로 여유롭지 못하다. </p><p>그런 당신을 위해 준비했습니다.</p><p><strong>GitHub Page!</strong></p><p>물론 내가 준비한 것은 아니다. </p><h2 id="GitHub-Page란"><a href="#GitHub-Page란" class="headerlink" title="GitHub Page란"></a>GitHub Page란</h2><p>GitHub 및 Git에 대해선 추후에 포스팅 예정.</p><p>GitHub에서 제공하는 정적 사이트 호스팅 서비스로 ~.github.io로 끝나는 블로그를 본적이 있다면 그러한 블로그들이 GitHub Page를 이용해 호스팅된 웹사이트이다. </p><p>GitHub 계정만 있다면 저장소를 생성하는 것만으로 호스팅이 가능하고 무엇보다 무료이기 때문에 동적인 웹사이트를 필요로 하지만 않는다면 최고의 선택지라고 할 수 있다. </p><h2 id="GitHub-저장소-만들기"><a href="#GitHub-저장소-만들기" class="headerlink" title="GitHub 저장소 만들기"></a>GitHub 저장소 만들기</h2><p>일단 GitHub 계정이 있다는 가정 하에 시작을 하자면 일단 저장소를 만들어야한다. </p><p><img src="/img/image-20210407142724230.png" alt="image-20210407142724230"></p><center><새로운 저장소 만들기></center><p>오른쪽 위 프로필 왼쪽의 ‘더하기’ 표시를 누르면 <code>New repository</code> 라는 버튼을 볼 수가 있다. 이것을 클릭하면</p><img src="\img\image-20210407142850103.png" alt="image-20210407142850103" style="zoom:100%;" /><p>이런 화면이 나온다. </p><p>여기서 중요한 점은 <strong>Repository name</strong>인데 GitHub Page를 이용하기 위해서는 저장소의 이름을 USERNAME.github.io로 설정해주어야만 한다. (여기서 USERNAME은 본인의 GitHub 사용자 이름이다)</p><p><strong>Description</strong>은 이 저장소의 설명이 되는데 아무말이나 적어도 된다. 보통은 블로그 설명과 함께 링크를 올려두는 경우가 많다. </p><p><strong>Public</strong>에 체크해주면 된다. </p><p>밑의 선택사항은 본인의 상황에 맞춰서 선택을 하면 되고 잘 모르겠다면 그냥 스킵을 해도 좋다. </p><p>전부 작성했다면 밑의 <code>Create repository</code> 버튼을 눌러준다. </p><p><img src="\img\image-20210407143554790.png" alt="image-20210407143554790" style="zoom:100%;" /></p><p>이렇게 화면이 뜬다면 완성.</p><h2 id="Repository-Clone"><a href="#Repository-Clone" class="headerlink" title="Repository Clone"></a>Repository Clone</h2><p>저장소를 생성했다면 로컬에 저장소를 Clone해준다. </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> clone https://github.com/HATAEWOOK/username.github.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>  <p>이 명령어를 실행해 주면 해당 위치에 username.github.io란 폴더가 생길 것이다. 이제 이 폴더 안에 index.html 파일을 넣어주자</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> username.github.io$ <span class="token builtin class-name">echo</span> <span class="token string">"Hello World"</span> <span class="token operator">></span> index.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>위 명령어를 그냥 입력해도 좋고 그냥 메모장을 켜서 직접 폴더에 넣어도 상관이 없다. 어찌저찌 폴더에 html 파일을 넣었다면</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> <span class="token function">add</span> --all$ <span class="token function">git</span> commit -m <span class="token string">"First Commit"</span>$ <span class="token function">git</span> push -u origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>명령어를 이용해 commit 과 push를 해준다. 이 부분을 잘 모르겠다면 일단 이번엔 그대로 입력만 해도 된다. 추후에 Git 게시물을 통해 정리하겠다. </p><p>이렇게 변경내역을 push 해준 후에 다시 GitHub 저장소에 들어가보면</p><img src="\img\image-20210407151849171.png" alt="image-20210407151849171" style="zoom:100%;" /><p>이렇게 index.html 파일이 들어가있는 것을 확인할 수 있다. </p><h2 id="GitHub-Page-설정"><a href="#GitHub-Page-설정" class="headerlink" title="GitHub Page 설정"></a>GitHub Page 설정</h2><p>이제 이 저장소를 GitHub Page용 서버로 사용한다는 설정을 해주어야한다. </p><p>오른쪽 위의 <code>Setting</code>에 들어간 후에 밑으로 쭉 내리면 GitHub Pages라는 항목을 볼 수가 있다. </p><p><img src="/img/image-20210407152123691.png" alt="image-20210407152123691"></p><p>여기서 GitHub Page의 소스 파일의 브런치를 설정해주기 위해 <code>None</code> 박스를 클릭해 준 후 <code>master</code>를 선택한 다음 <code>Save</code>를 눌러주면</p><img src="\img\image-20210407152346796.png" alt="image-20210407152346796" style="zoom:100%;" /><p>이렇게 된다. 이렇게 페이지 GitHub Pages 설정을 끝낸 후에 <a href="https://username.github.io에/">https://username.github.io에</a> 접속하면</p><img src="\img\image-20210407151604853.png" alt="image-20210407151604853" style="zoom:100%;" /><p>이런 화면을 볼 수가 있다. 이렇게 GitHub  Page가 생겼다. </p><h1 id="Hexo-배포하기"><a href="#Hexo-배포하기" class="headerlink" title="Hexo 배포하기"></a>Hexo 배포하기</h1><p>이제 서버가 생겼으니 만들어 둔 파일들을 Static Website Generator를 이용해 배포만 하면 다른 사람도 내가 이전에 만들어놓은 블로그를 볼 수 있게된다. </p><p>사실 저장소만 만들어 놨으면 배포는 굉장히 간단하다. 일단 Hexo 블로그를 git을 통해 배포할 때 필요한 플러그인을 설치 해야한다. </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-deplyer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>이러면 이제 거의 다 왔다. <a href="">이전 포스트</a>의 블로그 root 폴더 안에 <code>_config.yml</code>이라는 파일이 있을 것이다. 이 파일을 열어 <code>Deployment</code> 부분을 찾아 내용을 아래와 같이 변경해주면 된다. </p><p><img src="/img/image-20210407154555506.png" alt="image-20210407154555506"></p><p><strong>type</strong>부분은 git을 적어주고, <strong>branch</strong>에는 master를 넣어주면 된다. 그리고 <strong>repo</strong>에는 위에서 만들어둔 GitHub Pages 저장소 링크를 적어주면 된다.</p><p>이제 모든 준비는 끝났다. 정적 파일을 생성하고 배포만 해주면 인터넷 세상에 나의 블로그가 생기게된다. </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate <span class="token comment">#정적 파일 생성</span>$ hexo deploy <span class="token comment">#git을 통해 배포</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>이렇게 하면 짜잔! </p><p><img src="/img/image-20210407155215118.png" alt="image-20210407155215118"></p><p>이렇게 해당 링크로 블로그에 접속하는 것이 가능해진다.</p><h1 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h1><p>이렇게 만들어 놓은 Hexo 블로그를 다른 사람들이 접속할 수 있게되었다. 그렇지만 블로그 이름도 다른 이름으로 되어있고 프로필도 제작자 이름으로 되어있어서 이대로는 안된다. 다음 포스팅에서는 이런 블로그 설정들을 바꾸는 방법에 대해서 알아보자. </p>]]></content>
      
      
      
        <tags>
            
            <tag> GitHub Page </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>기술 블로그를 해야된다며? (1) 초기 준비</title>
      <link href="2021/04/07/blog01/"/>
      <url>2021/04/07/blog01/</url>
      
        <content type="html"><![CDATA[<img src="\img\HexoXGithub.png" alt="image-20210406150009397" style="zoom:100%;" /><h1 id="야너두-야나두"><a href="#야너두-야나두" class="headerlink" title="야너두? 야나두!"></a>야너두? 야나두!</h1><p>요즘 어지간히 컴퓨터 좀 두드린다 하는 사람들은 기술 블로그를 가지고 있는 것 같다. 이제는 가슴 속에 품고 다니는 이력서 같은 느낌. </p><p>그래서 나도 한다. </p><p>사실 이 생각을 한거는 1년 전쯤이고 만들어서 하기도 했었다. 이름도 지었다. 그 이름하야 ‘Knowledge Digest’. 내 지식의 요약본이라고 나름 의미도 붙였고 ‘다이제스트니까 위장 모양 마크도 만들어야지~’라면서 마크도 만들었지만 몇 달 학교에서 배운 것들 올리더니 졸업이 가까워 지니 아주 가볍게 내팽겨쳤었다. </p><img src="\img\image-20210406150009397.png" alt="image-20210406150009397" style="zoom:100%;" /><center><이전 블로그. 나름 미니멀을 추구한거 같은데 그냥 허전할 따름이다></center><p>이제와서 내 이력에 대한 조바심도 생기고 할 줄 아는 것도 없는 것 같아서 공부도 할 겸해서 블로그를 다시 시작할까~ 해서 들어가봤더니 이제보니</p><p><strong>너무 구리다.</strong></p><p>레이아웃도 구리지만 마크도 구리고 글 내용도 구리고 재미도 없다. 그리고 결정적으로 구조를 너무 지저분하게 해서 어디를 어디서 부터 건들여서 고칠까 감이 안잡힌다. 이걸 어쩌지. </p><p>RPG게임 하다가 망캐 되면 찝찝해서 다시 만들어서 처음부터 키우고,</p><p>청소를 하더라도 무조건 물건 다 들어내서 하는 나로서는 이 상태로 덕지덕지 고쳐서 쓰는건 용납이 안된다. </p><h1 id="다시-처음부터"><a href="#다시-처음부터" class="headerlink" title="다시 처음부터"></a>다시 처음부터</h1><p>이전 블로그는 Jekyll의 minimal-mistakes 테마를 사용해서 만들었었다…..라고 하기엔 내 나름 레이아웃들을 수정을 해서 이제 원형을 알아볼 수가 없다.  </p><p>쨌든. 이전에 Jekyll을 썼으니 다시 쓸려고 했지마는 만든지 너무 오래되어서 그게 뭐였는지 잘 기억이 나지가 않았다. 이게 뭐였지?</p><h2 id="Static-Website-Generator"><a href="#Static-Website-Generator" class="headerlink" title="Static Website Generator"></a>Static Website Generator</h2><p>직역하자면 ‘정적 웹사이트 생성기’. 간단하게 말하면 로컬 환경에서 생성기를 이용해서 html 파일을 생성하고, 그 만들어진 파일들만 서버로 보내서 웹사이트를 구현한다.  이미 만들어져있는 파일들을 서버에 올리기 때문에 ‘정적’인 것이다. 이게 있으면 서버 사이드에서 작업을 하거나 데이터베이스를 사용할 필요가 없이 리퀘스트 받은 html페이지만을 표시하면 되니 이보다 더 간편할 수가 없다. 수정이나 글 작성도 로컬에서 파일을 수정/작성해서 서버에 올리기만 하면 html 페이지로 생성되서 페이지가 수정/작성 된다. </p><h2 id="Jekyll-vs-Hugo-vs-Hexo"><a href="#Jekyll-vs-Hugo-vs-Hexo" class="headerlink" title="Jekyll vs Hugo vs  Hexo"></a>Jekyll vs Hugo vs  Hexo</h2><p>잘 쓰이는 static website generator로는 Jekyll, Hugo, Hexo 등등이 있다. </p><p><strong>Jekyll</strong>는 Ruby 기반의 static website generator로 여담이지만 GitHub의 공동 설립자가 만들었다고 한다. 그래서 그런지 GitHub Pages랑 사용하기엔 굉장히 최적화 되어있는면이 있다. 게다가 제일 많이 쓰이기도 하기에 GitHub에 <a href="https://github.com/topics/jekyll-theme">블로그 테마</a>도 다양하게 있다. </p><p><strong>Hugo</strong>는 Go로 작성되었다. Jekyll에 비하면 많이 대중적이지 않지마는 그래도 사용자가 늘어나는 추세에 있다. 광고로 ‘세계에서 제일 빠른 웹사이트 제작 프레임워크(The world’s fastest framework for building websites)’ 라고 하는 만큼 스피드에 중점을 두고 있다.</p><p><strong>Hexo</strong>는 Node.js 기반으로 빠르기도 하고 GitHub pages나 heroku를 통해서 배포를 할 때 하나의 커맨드 라인만으로 간단하게 배포가 된다. hexo도 물론 <a href="https://hexo.io/themes/">많은 테마들</a>을 제공한다. </p><h2 id="무엇을-고를까"><a href="#무엇을-고를까" class="headerlink" title="무엇을 고를까"></a>무엇을 고를까</h2><p>사실 이 중에 무엇을 고르든 구축에는 큰 문제가 없다. 초기 블로그 작업을 위한 가이드라인이 자세히 작성되어있고 포스트 작성법도 거의 전부 동일하다고 해도 된다. 그렇다면 여기서 고려할 것은 </p><ol><li>디자인</li><li>직접 레이아웃 커스터마이징이 가능할까</li></ol><p>정도이다. </p><p>사실 디자인은 개인 취향에 따라 많이 갈리겠지만 개인적으로 Jekyll 테마 중에는 마음에 드는 테마가 없었다. 제일 유명한 듯한 Minimal-mistakes가 깔끔하고 좋긴하지만 이건 너무 많이들 쓰는지라 샤이 힙스터인 나는 쓰기가 싫더라.  그렇게 테마를 찾아 헤메이고 있는데 눈에 쏙 들어온 테마가 하나 있었다. </p><img src="https://github.com/Haojen/hexo-theme-Claudia/raw/master/screenshot/claudia-cover-v2.png" alt="cover" style="zoom:100%;" /><center><출처 :     <a href="https://github.com/Haojen/hexo-theme-Claudia">https://github.com/Haojen/hexo-theme-Claudia</a>></center><p>이 Hexo 테마가 너무 마음에 쏙 들어서 다른 테마를 봐도 눈에 들지가 않아서 결국 장고 끝에 이 테마를 써야겠다고 결정했다. </p><p>그리고, 직접 레이아웃 커스터마이징이 가능할까 하는 문제는 이제 static website generator가 어떤 언어로 작성되었는지가 중요해지는데 Ruby, Go, Node.js 중에서 Ruby랑 Go는 정말 기본적인 문법조차 모르는 상태인지라 저걸 이용해서 레이아웃을 변경하기나 하는건 굉장히 번거롭겠다 싶었다. </p><p>그렇게 최종적으로 <strong>Hexo</strong>를 쓰기로 결정했다. </p><h1 id="블로그-준비"><a href="#블로그-준비" class="headerlink" title="블로그 준비"></a>블로그 준비</h1><h2 id="Git-설치"><a href="#Git-설치" class="headerlink" title="Git 설치"></a>Git 설치</h2><p>Git은 <a href="https://git-scm.com/downloads">웹사이트</a>에서 바로 OS에 맞게 설치하면 된다. 자세한 내용은 차후에 별도 포스팅을 할 예정. </p><h2 id="Node-js-설치"><a href="#Node-js-설치" class="headerlink" title="Node.js 설치"></a>Node.js 설치</h2><p>node.js도 마찬가지로 <a href="https://nodejs.org/en/">공식사이트</a>에서 OS에 맞게 설치하면 된다. 혹시나 본인의 PC에 node.js와 npm(node package manager)가 설치되어 있는지 알고싶다면 밑의 명령어로 확인할 수 있다. </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ node -v$ <span class="token function">npm</span> -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>  <h2 id="Hexo-설치"><a href="#Hexo-설치" class="headerlink" title="Hexo 설치"></a>Hexo 설치</h2><p>npm을 이용해서 Hexo를 설치한다. </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>  <h2 id="Hexo-시작하기"><a href="#Hexo-시작하기" class="headerlink" title="Hexo 시작하기"></a>Hexo 시작하기</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo init hexo_blog <span class="token comment">#hexo_blog라는 폴더를 생성하고 필요한 파일들을 설치한다</span>$ <span class="token builtin class-name">cd</span> hexo_blog$ <span class="token function">npm</span> <span class="token function">install</span> <span class="token comment">#npm install 노드 모듈 설치 (정의된 의존성 모듈 설치)</span>$ hexo server <span class="token comment">#로컬에서 hexo 서버 실행</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>hexo server 명령어를 실행하면 <a href="http://localhost:4000/">http://localhost:4000</a>으로 접속하여 생성된 hexo 블로그를 확인할 수 있다. </p><img src="\img\image-20210406175118474.png" alt="image-20210406175118474" style="zoom:100%;" /><p>이 페이지에서 기본적인 포스트 작성방법등 기본적인 명령어를 알 수가 있다. </p><h2 id="테마-적용"><a href="#테마-적용" class="headerlink" title="테마 적용"></a>테마 적용</h2><p>테마는 우선 <a href="https://hexo.io/themes/">이 곳</a>에서 원하는 테마를 골라야한다. 나는 이 중에서 눈에 꽂힌 <a href="https://github.com/Haojen/hexo-theme-Claudia">claudia</a>를 선택했다. </p><p>테마를 적용하기 위해서는 블로그 root 폴더로 이동한 후 해당 테마를 theme 폴더 안에 clone 해주어야한다. </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> hexo_blog$ <span class="token function">git</span> clone https://github.com/Haojen/hexo-theme-Claudia themes/claudia<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>위 명령어를 입력하면 hexo 블로그 root 폴더 내의 theme 폴더안에 claudia라는 폴더가 생성된다. </p><p>그리고 블로그 root 폴더 내의 <code>_config.yml</code> 에서 Exthensions-theme을 landscape에서 claudia로 변경해준다. </p><p><img src="/img/image-20210406182837067.png" alt="image-20210406182837067"></p><p>마지막으로 변경사항들을 정적 파일로 생성하고 배포를 한다</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo clean <span class="token comment">#테마를 적용하기 위해서 캐시파일 및 생성된 파일들을 삭제</span>$ hexo generate <span class="token comment">#정적파일 생성</span>$ hexo deploy <span class="token comment">#배포</span><span class="token comment"># hexo g -d 생성 및 배포</span>$ hexo server -o <span class="token comment">#서버 실행과 동시에 창 열기</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>서버를 실행하게 되면</p><p><img src="/img/image-20210406183544626.png" alt="image-20210406183544626"></p><p>와 같이 테마가 적용된 블로그를 확인할 수 있다. </p><h1 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h1><p>여기까지 블로그를 생성하고 테마를 적용시켜서 내 맘에 쏙 드는 블로그를 만들 수가 있었다. </p><p>하지만 나만 볼려고 만드는 블로그가 아니기 때문에 이 녀석을 넓은 인터넷 세상으로 떠나보내주어야한다. </p><p>다음 포스팅에서는 GitHub Page를 이용해 호스팅 하는 방법에 대해서 알아보자.</p>]]></content>
      
      
      
        <tags>
            
            <tag> GitHub Page </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
